package com.spechpro.biometric.onepass.client.main;

import com.spechpro.biometric.onepass.client.api.*;

import java.io.File;
import java.util.UUID;

/**
 * Created by sadurtinova on 27.04.2018.
 * OnePass is a biometric authentication service which allows you to enroll a person into the system
 * using his/her voice sample and face photo. Later the person can be identified also by his/her voice sample
 * and face photo. OnePass is a text dependent system, i.e. a person to be verified should pronounce
 * a password generated by the system (five digits sequence).
 * <p>
 * This example shows how to enroll a person with identifier PERSON to
 * biometric verification system and then verify his/her identity.
 * <p>
 * This is a classic scenario. Number of steps may vary in
 * customized systems. But THE MOST SECURE scenario consists of four-step (3 voice and 1 face)
 * registration and two-step (1 voice and 1 face) verification.
 * <p>
 * REGISTRATION
 * To enroll a person you need to send three (in classical scenario) samples of his/her voice
 * with pronunciation of 10 digits (from 0 to 9). The samples MUST BE DIFFERENT,
 * this means that each sample must have digits in different order.
 * A common way to do this is to send a sample with digits
 * from 0 to 9, a sample with digits from 9 to 0, and a sample with randomly placed digits.
 * <p>
 * Sometimes it may be difficult for a person to read a random sequence of ten
 * digits, e. g. in a telephone channel. In this case the system may be configured to require only
 * two audio sample for the registration. But this affects the quality and accuracy of voice models.
 * <p>
 * Tha last step in registration is to send a person's photo. This step can also be omitted if the system
 * configured accordingly.
 * <p>
 * VERIFICATION
 * The verification process also depends on the system configuration. A classic scenario supposes two-step verification.
 * First step is voice verification: a person to be verified is to read a password (5 digits) generated by the system.
 * The second step is to send a photo of the person.
 * Once these steps are completed a result (score) may be got from the system.
 * This score shows how close is the model of the verified person to the model of the registered person with the same
 * identifier.
 */


public class Main {

    /**
     * Biometric host connection parameters
     *
     * @value PERSON person's identifier
     * @value PROTOCOL protocol of the biometric service
     * @value HOST name of the biometric service host
     * @value PORT port of the biometric service host
     * @value APPLICATION_ROOT root of the application
     */
    private static final String PERSON = "6948";
    private static final String PROTOCOL = "https";
    private static final String HOST = "onepass.tech";
    private static final String PORT = null;
    private static final String APPLICATION_ROOT = "devvkop/rest";

    /**
     * Biometric platform login credentials
     *
     * @value USERNAME
     * @value PASSWORD
     * @value DOMAIN_ID
     */
    private static final String USERNAME = "admin";
    private static final String PASSWORD = "QL0AFWMIX8NRZTKeof9cXsvbvu8=";
    private static final int DOMAIN_ID = 201;

    /**
     * Text from registration audio samples
     *
     * @value PASSWORD_1 first audio sample - digits from 0 to 9
     * @value PASSWORD_2 second audio sample - digits from 9 to 0
     * @value PASSWORD_3 third audio sample - random sequence of digits from 0 to 9
     */
    public static final String PASSWORD_1 = "ноль один два три четыре пять шесть семь восемь девять";
    public static final String PASSWORD_2 = "девять восемь семь шесть пять четыре три два один ноль";
    public static final String PASSWORD_3 = "пять три восемь девять семь один четыре шесть два ноль";

    public static void main(String[] args) {

        Main main = new Main();
        /**
         * OnePassApi connects to the biometric host
         */
        OnePassApi onePassApi = new OnePassApi(PROTOCOL, HOST, PORT, APPLICATION_ROOT);

        /**
         * SessionAPI gets a session identifier.
         * All steps of biometric registration or verification should be completed
         * with one session identifier.
         */
        SessionApi sessionApi = new SessionApi(USERNAME, PASSWORD, DOMAIN_ID);
        UUID sessionId = sessionApi.startSession();

        /**
         * PersonApi for person manipulations: create, delete a person,
         * check person's registration information.
         */
        PersonApi personApi = onePassApi.person(PERSON, sessionId.toString());

        /**
         * RegistrationApi for registration manipulations.
         * Classical registration procedure:
         * 1. register person's identifier in the system
         * 2. send an audio sample with digits from 0 to 9
         * 3. send an audio sample with digits from 9 to 0
         * 4. send an audio sample with random sequence of digits from 0 to 9
         * 5. send a person's photo
         */

        RegistrationApi registrationApi = personApi.startRegistration(sessionId);
        registrationApi.createPerson();
        registrationApi.sendRegistrationPhoto(main.getFile("registrationPhoto.JPG"));
        registrationApi.sendDynamicRegistrationVoice(PASSWORD_1, main.getFile("0123456789.wav"));
        registrationApi.sendDynamicRegistrationVoice(PASSWORD_2, main.getFile("9876543210.wav"));
        registrationApi.sendDynamicRegistrationVoice(PASSWORD_3, main.getFile("5389714620.wav"));

        /**
         * VerificationApi for verification manipulations.
         * Classical verification procedure:
         * 1. start verification
         * 2. get a verification PASSWORD (5 digits) generated by the biometric server
         * 3. send an audio sample of person pronouncing 5 digits of the PASSWORD
         * 4. send a person's photo
         * 5. get a verification score
         * 6. close verification
         */

        UUID verificationSessionId = sessionApi.startSession();
        VerificationApi verificationApi = personApi.startVerification(verificationSessionId.toString());
        String verificationPassword = verificationApi.getVerificationPassword();
        /**
         * ====== THIS IS NOT A WORKING CODE BLOCK ======
         * The verification password is generated for every verification transaction. That's why it's not
         * possible to give a real working example with recorded voice.
         * */
        verificationApi.sendDynamicVerificationVoice(new File("verificationPassword"));
        verificationApi.sendVerificationPhoto(new File("verificationPhoto.JPG"));
        verificationApi.getDynamicVerificationScore();
        verificationApi.closeVerificationSession();
        /**
        * ================================================
        * */
    }

    private File getFile(String fileName) {
        ClassLoader classLoader = getClass().getClassLoader();
        File file = new File(classLoader.getResource(fileName).getFile());
        return file;
    }
}
