package com.spechpro.biometric.onepass.client.api;

import com.spechpro.biometric.onepass.client.dto.*;
import com.spechpro.biometric.onepass.client.exceptions.*;
import com.spechpro.biometric.onepass.client.rest.OnePassRestClient;
import com.spechpro.biometric.onepass.client.util.DataConverter;
import org.apache.http.Header;
import org.apache.http.HttpStatus;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.message.BasicHeader;
import org.apache.log4j.Logger;

import java.io.File;
import java.io.IOException;
import java.net.URLDecoder;
import java.util.UUID;

/**
 * Created by sadurtinova on 01.05.2018.
 */
public class RegistrationApi {

    private final String personId;
    private final UUID sessionId;
    private UUID transactionId;
    private static final Logger LOGGER = Logger.getLogger("PersonApi");

    /**
     * Create object with enrollment (registration) methods for a particular session and particular person
     *
     * @param personId  person identifier
     * @param sessionId session identifier
     */
    public RegistrationApi(String personId, UUID sessionId) {
        this.personId = personId;
        this.sessionId = sessionId;
    }

    /**
     * Adds person to biometric system
     *
     * @return true if person successfully added in biometric system
     */
    public boolean createPerson() throws OnePassClientException {
        boolean registered = false;
        try (CloseableHttpResponse response = OnePassRestClient.get()
                .createPerson(personId, new Header[]{new BasicHeader("X-Session-Id", sessionId.toString())})) {
            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                StartTransactionRequestDto startTransaction = DtoHelper.create(response.getEntity().getContent(),
                        StartTransactionRequestDto.class);
                this.transactionId = UUID.fromString(startTransaction.transactionId);
                registered = true;
            } else {
                ExceptionMapper.map(response);
            }
            LOGGER.info(String.format("Status code of createPerson() with personId %s is %s : "
                    , personId, response.getStatusLine().getStatusCode()));
            LOGGER.info("Result of createPerson() is: " + registered);
        } catch (IOException e) {
            LOGGER.error("Couldn't create person with personId: " + personId);
            e.printStackTrace();
        }
        return registered;
    }

    /**
     * Sends sound file to create person's dynamic model. This method is used in case of text dependent biometric
     * system, i.e when verification password is generated by biometric system for every verification transaction
     *
     * @param password words(ten digits) pronounced by person
     * @param file     sound file
     * @return true if dynamic model is successfully created
     */
    public boolean sendDynamicRegistrationVoice(String password, File file) throws OnePassClientException {
        LOGGER.info("Sending registration voice");
        boolean sent = false;
        try (CloseableHttpResponse response = OnePassRestClient.get().sendPersonVoiceDynamicFile(personId,
                new SendDynamicFileRequestDto(URLDecoder.decode(password, "UTF-8"), DataConverter.convertFileToBase64(file)),
                new Header[]{new BasicHeader("X-Session-Id", sessionId.toString()),
                        new BasicHeader("X-Transaction-Id", transactionId.toString())})) {
            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_NO_CONTENT) {
                sent = true;
            } else {
                ExceptionMapper.map(response);
            }
            LOGGER.info("Result of sendDynamicRegistrationVoice is " + sent);
        } catch (IOException e) {
            LOGGER.error("Couldn't send sound for registration for person with personId: " + personId);
            e.printStackTrace();
        }
        return sent;
    }

    /**
     * Sends sound file to create person's static model. This method is used in case of text independent biometric
     * system, i.e when verification password is the same for every verification transaction
     *
     * @param file
     * @return true if static model is successfully created
     */
    public boolean sendStaticRegistrationVoice(File file) throws OnePassClientException {
        LOGGER.info("Sending static registration voice");
        boolean sent = false;
        try (CloseableHttpResponse response = OnePassRestClient.get().sendPersonVoiceStaticFile(personId,
                new SendStaticFileRequestDto(DataConverter.convertFileToBase64(file)),
                new Header[]{new BasicHeader("X-Session-Id", sessionId.toString()),
                        new BasicHeader("X-Transaction-Id", transactionId.toString())})) {
            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_NO_CONTENT) {
                sent = true;
            } else {
                ExceptionMapper.map(response);
            }
            LOGGER.info("Result of sendDynamicRegistrationVoice is " + sent);
        } catch (IOException e) {
            LOGGER.error("Couldn't send sound for static registration for person with personId: " + personId);
            e.printStackTrace();
        }
        return sent;
    }

    /**
     * Sends photo to create person's face model.
     *
     * @param file face photo
     * @return true if face model is successfully created
     */
    public boolean sendRegistrationPhoto(File file) throws OnePassClientException {
        LOGGER.info("Sending registration photo");
        boolean sent = false;
        if (transactionId != null) {
            try (CloseableHttpResponse response = OnePassRestClient.get().sendPersonPhotoFile(
                    new SendFaceFileRequestDto(DataConverter.convertFileToBase64(file)),
                    new Header[]{new BasicHeader("X-Session-Id", sessionId.toString()),
                            new BasicHeader("X-Transaction-Id", transactionId.toString())})) {
                if (response.getStatusLine().getStatusCode() == HttpStatus.SC_NO_CONTENT) {
                    sent = true;
                } else {
                    ExceptionMapper.map(response);
                }
                LOGGER.info("Result of sendDynamicRegistrationVoice is " + sent);
            } catch (RuntimeException e) {
                LOGGER.error("Couldn't send sound for static registration for person with personId: " + personId);
                e.printStackTrace();
            } catch (IOException e) {
                LOGGER.error("Couldn't send sound for static registration for person with personId: " + personId);
                e.printStackTrace();
            }
            return sent;
        } else {
            throw new NotInitializedTransactionException("You should call createPerson() method to start registration");
        }
    }

}
